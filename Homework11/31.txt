Output:
0
1

Below are the possible ways of getting this output

1.
a. Main thread created thread_0 who enters the sync block
b. prints it's id
c. create thread_1 and sets oneIsRunning as True
d. Scheduler now has 2 options if it picks thread_1 then it'll go to wait. Note that it still has one key with it
e. thread_1 will enter the sync block and print it's id
f. It can't enter the second sync block because thread_0 has the key for it
This is a deadlock situation. Because each thread in the sync block using the key for an object which the other thread wants

2.
a. Main thread created thread_0 who enters the sync block
b. prints it's id
c. create thread_1 and sets oneIsRunning as True. Before thread_0 enters the second sync block below steps happen
d. Scheduler chooses thread_1 will enter the sync block and print it's id
f. Now either of them can't enter the second sync block due to one holding the key of others

3.
a. Main thread created thread_0 who enters the sync block
b. prints it's id
c. create thread_1 (Before it sets oneIsRunning to true below steps take place)
d. Scheduler now has 2 options if it picks thread_1 then,
e. thread_1 will enter the sync block and print it's id
f. it'll create a new thread_1
g. This thread can't enter the sync block because the old thread_1 has the required keys
h. old thread_1 will change the value of oneIsRunning to True
i. It can't enter the sync block as thread_0 as the key

So the outputs are same but different ways to get there
