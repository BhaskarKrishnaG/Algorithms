The program does not compile because of the return statement on line #14
    This is an unreachable statement as we have a return in the finally block
    any code that's written below the block is not reachable.

Execution:
  private int noSystemExit() {
        try {
            throw new Exception("1");
        } catch (Exception e){
            System.out.println("2");
            return 0;
        } finally{
            System.out.println("3 finally");
            return 1;
        }
        return 3;
  }

This method starts off with the try block which throws an exception
- This will be caught by the catch block which will print "2"
- Though we have a return statement finally will be executed!
- So we move to finally block and print "3"
- The method finally terminates by returning 1 (If we comment out the unreachable code)

  private int noExeption() {
        try {
            int x = 1 - 1;
            System.out.println("inside try: 1");
            return x;
        } catch (Exception e){
            System.out.println("inside catch: 2");
            return 1;
        } finally{
            System.out.println("inside finally: 3 ");
            return 2;
        }
  }

This method starts off with the try block which does not have exceptions
- x <- 0
- We print "inside try: 1", again the don't execute this return
- We skip the catch block because no exception was thrown
- Finally will be executed which prints "inside finally: 3"
- The method terminates by returning 2


  private int anExeption1()     {
        int[] anArray  = new int[1];
        try {
            anArray[2] = 1 / 0;
            System.out.println("inside try: 1");
            return 0;
        } catch (ArithmeticException e)    {
            anArray[2] = 0;
            System.out.println("inside catch: 2");
            return 1;
        } finally {
            System.out.println("inside finally: 3 ");
            return 2;
        }
        // return 3;
  }

This methods starts off by initializing an integer array of size 1
- Inside try we are trying to access the 2nd index of the array which doesn't exist
  so system will throw Array index out of bound error (Nothing further will be executed in the try)
- Catch will NOT be executed because it's catching ArithmethicExecption
- We will move on to finally which print "inside finally: 3"
- Method terminates by returning 2


  private int anExeption2() {
        int[] anArray  = new int[1];
        try {
            anArray[2] = 0;
            anArray[2] = 1 / 0;
            System.out.println("inside try: 1");
            return 0;
        } catch (ArithmeticException e){
            System.out.println("inside catch: 2");
            return 1;
        } finally{
            System.out.println("inside finally: 3 ");
            return 2;
        }
        // return 3;
  }

This method starts off by initialising an integer array of size 1
- Inside the try we are trying to access the 2ns index which doesn't exist
  so system will throw Array index out of bound error (Nothing further will be executed in the try)
- Catch will NOT be executed because it's catching ArithmethicExecption
- We will move on to finally which print "inside finally: 3"
- Method terminates by returning 2


  private void withSystemExit() {
        try {
            throw new Exception("4");
        } catch (Exception e){
            System.out.println("5");
            System.exit(0);
        } finally{
            System.out.println("6 finally");
        }
        System.out.println("exit(): you will not see this line");    // not exectuted
  }

This method starts off by executing the try block
- We are throwing an exception
- This exception will be caught by the catch block, which prints "5"
  Then the JVM will terminate because of System.exit(0)
- Nothing further will be executed, the method will terminate and so will the JVM